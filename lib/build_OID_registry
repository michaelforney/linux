io.input(arg[1])
io.output(arg[2])

local entries = {}
local total_length = 0
for line in io.lines() do
	local name, oid = line:match('%s+OID_(%a[%w_]+),%s+/%*%s+([012][%d.]*)%s+%*/')
	if name then
		local components = {}
		local i = 1
		while i do
			local j = oid:find('.', i, true)
			table.insert(components, tonumber(oid:sub(i, j and j - 1)))
			i = j and j + 1
		end
		local bytes = {components[1] * 40 + components[2]}
		for i = 3, #components do
			local c = components[i]
			local j = #bytes + 1
			while c > 0 do
				table.insert(bytes, j, bit32.bor(bit32.band(c, 0x7f), 0x80))
				c = bit32.rshift(c, 7)
			end
			bytes[#bytes] = bit32.band(bytes[#bytes], 0x7f)
		end
		local hash = #bytes - 1
		for _, byte in pairs(bytes) do
			hash = hash + byte * 33
		end

		table.insert(entries, {
			name = name,
			oid = oid,
			bytes = bytes,
			index = total_length,
			hash = bit32.band(0xff, bit32.bxor(hash, bit32.rshift(hash, 8), bit32.rshift(hash, 16), bit32.rshift(hash, 24))),
		})
		total_length = total_length + #bytes
	end
end

io.write(string.format([[
/*
 * Automatically generated by %s. Do not edit
 */
]], arg[0]))

local int_type
if total_length <= 255 then
	int_type = "char"
else
	int_type = "short"
end
io.write(string.format('\nstatic const unsigned %s oid_index[OID__NR + 1] = {\n', int_type))
for _, e in ipairs(entries) do
	io.write(string.format('\t[OID_%s] = %d,\n', e.name, e.index))
end
io.write(string.format('\t[OID__NR] = %d\n', total_length))
io.write('};\n')

io.write(string.format('\nstatic const unsigned char oid_data[%d] = {\n', total_length))
for _, e in ipairs(entries) do
	io.write(string.format('\t%s, \t// %s\n', table.concat(e.bytes, ', '), e.name))
end
io.write('};\n')

table.sort(entries, function(e1, e2)
	if e1.hash ~= e2.hash then
		return e1.hash < e2.hash
	elseif #e1.bytes ~= #e2.bytes then
		return #e1.bytes < #e2.bytes
	end
	for i = #e1.bytes, 1, -1 do
		if e1.bytes[i] ~= e2.bytes[i] then
			return e1.bytes[i] < e2.bytes[i]
		end
	end
end)

local numbits
if #entries <= 255 then
	numbits = 8
else
	numbits = 16
end
io.write(string.format([[

static const struct {
	unsigned char hash;
	enum OID oid : %d;
} oid_search_table[OID__NR] = {
]], numbits))
for i, e in ipairs(entries) do
	local hex = {}
	for _, byte in ipairs(e.bytes) do
		table.insert(hex, string.format('%02x', byte))
	end
	io.write(string.format('\t[%3d] = { %3d, OID_%-35s }, // %s\n', i - 1, e.hash, e.name, table.concat(hex)))
end
io.write('};\n')
