from __future__ import print_function
import os
import re
import sys

class Entry(object):
	total_length = 0

	def __init__(self, name, oid):
		components = [int(c) for c in oid.split(".")]
		octets = [components[0] * 40 + components[1]]
		for c in components[2:]:
			new = []
			while c:
				new.append((c & 0x7f) | 0x80)
				c >>= 7
			new[0] &= 0x7f
			octets.extend(reversed(new))
		hash = len(octets) - 1
		for octet in octets:
			hash += octet * 33

		self.name = name
		self.oid = oid
		self.octets = octets
		self.index = Entry.total_length
		self.hash = ((hash >> 24) ^ (hash >> 16) ^ (hash >> 8) ^ hash) & 0xff
		Entry.total_length += len(octets)

if len(sys.argv) != 3:
	print("Format: {} <in-h-file> <out-c-file>".format(sys.argv[0]), file=sys.stderr)
	sys.exit(2)

expr = re.compile("\s+OID_([a-zA-Z][a-zA-Z0-9_]+),\s+/[*]\s+([012][.0-9]*)\s+[*]/")
entries = []
with open(sys.argv[1]) as f:
	for line in f:
		m = expr.match(line)
		if m:
			entries.append(Entry(m.group(1), m.group(2)))
sys.stdout = open(sys.argv[2], "w")

print("/*")
print(" * Automatically generated by {}. Do not edit".format(sys.argv[0]))
print(" */")

int_type = "char" if Entry.total_length <= 255 else "short"
print("\nstatic const unsigned {} oid_index[OID__NR + 1] = {{".format(int_type))
for e in entries:
	print("\t[OID_{}] = {},".format(e.name, e.index))
print("\t[OID__NR] = {}".format(Entry.total_length))
print("};")

print("\nstatic const unsigned char oid_data[{}] = {{".format(Entry.total_length))
for e in entries:
	print("\t{}, \t// {}".format(", ".join(str(x) for x in e.octets), e.name))
print("};")

entries.sort(key=lambda e: (e.hash, len(e.octets), list(reversed(e.octets))))

print("\nstatic const struct {")
print("\tunsigned char hash;")
print("\tenum OID oid : {};".format(8 if len(entries) <= 255 else 16))
print("} oid_search_table[OID__NR] = {")
for i, e in enumerate(entries):
	hex_str = "".join("{:02x}".format(x) for x in e.octets)
	print("\t[{: >3}] = {{ {: >3}, OID_{: <35} }}, // {}".format(i, e.hash, e.name, hex_str))
print("};")
